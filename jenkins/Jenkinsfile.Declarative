def pomObject
def podLabel = "worker-${UUID.randomUUID().toString()}"

pipeline {
    agent{
        kubernetes {
            label podLabel
            cloud 'kubernetes'
            defaultContainer 'jnlp'
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: simple-java-maven-app
spec:
  #nodeSelector:
  #  ucpnoderole: ci
  containers:
  #Java agent, test executor
  - name: jnlp
    image: jenkins/jnlp-slave:alpine
    command:
    - /bin/sh
    args:
    - -c
    - umask 0000; jenkins-slave
    resources:
      limits:
        cpu: 500m
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 250Mi
    workingDir: /home/jenkins
    env:
    - name: JNLP_MAX_HEAP_UPPER_BOUND_MB
      value: 64
    volumeMounts:
    - mountPath: '/checkout'
      name: checkout
    - mountPath: '/var/run/docker.sock'
      name: docker-sock
  #maven
  - name: maven
    image: maven:3.6.0-jdk-12-alpine
    tty: true
    command:
    - /bin/sh
    args:
    - -c
    - cat
    resources:
      limits:
        cpu: 500m
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 250Mi
    workingDir: /home/jenkins
    volumeMounts:
    - mountPath: '/checkout'
      name: checkout
    - mountPath: '/var/run/docker.sock'
      name: docker-sock
  #alpine-utils
  - name: alpine-utils
    image: stevejr/alpine-utils:3.0
    tty: true
    command:
    - /bin/sh
    args:
    - -c
    - cat
    resources:
      limits:
        cpu: 500m
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 250Mi
    workingDir: /home/jenkins
    volumeMounts:
    - mountPath: '/checkout'
      name: checkout
    - mountPath: '/var/run/docker.sock'
      name: docker-sock
  volumes:
  - name: checkout
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
'''
        }
    }

    environment {
        APP_NAME = "${env.JOB_BASE_NAME}"
        BUILD_DATE = sh (returnStdout: true, script: "date -u +'%Y-%m-%dT%H:%M:%SZ'").trim()
        MAVEN_OPTIONS = '-DskipTests=true'
        REGISTRY_URL = "https://${DTR_REGISTRY}"
        SHORTREV = ''
        TAG = ''
        VERSION = ''
    }
    options {
        skipDefaultCheckout true
    }

    stages {
        stage('Checkout') {
            steps {
                container('alpine-utils') {
                    dir('/checkout/simple-java-maven-app') {
                        sh 'ls -ltra'
                        sh 'git clone https://github.com/stevejr/simple-java-maven-app .'
                        script {
                            SHORTREV = sh (returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                        }
                        sh 'ls -ltra'
                        println "SHORTREV: ${SHORTREV}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                container('maven') {

                    dir('/checkout/simple-java-maven-app') {
                        sh 'env'
                        script {
                            def pom = readMavenPom file: 'pom.xml'
                            // Now you have access to raw version string in pom.version
                            // Based on your versioning scheme, automatically calculate the next one
                            VERSION = pom.version.replaceAll('SNAPSHOT', "${SHORTREV}-${env.BUILD_NUMBER}").trim()
                            TAG = VERSION
                        }
                        println "VERSION: ${VERSION}"
                        println "TAG: ${TAG}"

                        // We never build a SNAPSHOT
                        // We explicitly set versions.
                        sh """
                            mvn -B org.codehaus.mojo:versions-maven-plugin:2.5:set -DprocessAllModules -DnewVersion=${VERSION}  $MAVEN_OPTIONS
                            mvn -B clean install $MAVEN_OPTIONS
                            pwd && ls -ltra && ls -ltra ./target
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('alpine-utils') {
                    dir('/checkout/simple-java-maven-app/jenkins') {
                        sh 'env'
                        sh 'pwd && ls -ltra && ls -ltra ../target'
                        sh """
                            cp -p ../target/my-app-${VERSION}.jar ${APP_NAME}-${VERSION}.jar
                            docker build --no-cache=true --build-arg BUILD_DATE=${BUILD_DATE} --build-arg VCS_REF=${SHORTREV} --build-arg BUILD_VERSION=${VERSION} --build-arg JAR_FILE=${APP_NAME}-${VERSION}.jar -t ${APP_NAME}:${TAG} .
                        """
                    }
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                container('alpine-utils') {
                    dir('/checkout/simple-java-maven-app') {
                        sh """
                            docker container run --name ${APP_NAME}-${TAG} ${APP_NAME}:${TAG}
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('alpine-utils') {
                    withCredentials([usernamePassword(credentialsId: 'jenkins', passwordVariable: 'REGISTRY_PASS', usernameVariable: 'REGISTRY_USER')]) {
                        sh """
                            docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASS} ${REGISTRY_URL}
                            docker image tag ${APP_NAME}:${TAG} ${DTR_REGISTRY}/jenkins/${APP_NAME}:${TAG}
                            docker image push ${DTR_REGISTRY}/${REGISTRY_USER}/${APP_NAME}:${TAG}
                            docker image rm ${DTR_REGISTRY}/${REGISTRY_USER}/${APP_NAME}:${TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            container('alpine-utils') {
                sh """
                    docker container rm ${APP_NAME}-${TAG} --force
                    docker image rm ${APP_NAME}:${TAG} --force
                """
            }
        }
    }
}
