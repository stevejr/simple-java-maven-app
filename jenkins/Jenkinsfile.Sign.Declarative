import groovy.json.JsonSlurperClassic
def payload = new groovy.json.JsonSlurperClassic().parseText(requestPayload)
def skipRemainingStages = false

def podLabel = "worker-${UUID.randomUUID().toString()}"

pipeline {
    agent{
        kubernetes {
            label podLabel
            cloud 'kubernetes'
            defaultContainer 'jnlp'
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: simple-java-maven-app
spec:
  nodeSelector:
    ucpnoderole: ci
  containers:
  #Java agent, test executor
  - name: jnlp
    image: jenkins/jnlp-slave:alpine
    command:
    - /bin/sh
    args:
    - -c
    - umask 0000; jenkins-slave
    resources:
      limits:
        memory: 512Mi
    workingDir: /home/jenkins
    env:
    - name: JNLP_MAX_HEAP_UPPER_BOUND_MB
      value: 64
    volumeMounts:
    - mountPath: '/checkout'
      name: checkout
    - mountPath: '/var/run/docker.sock'
      name: docker-sock
  #alpine-utils
  - name: alpine-utils
    image: stevejr/alpine-utils:3.0
    tty: true
    command:
    - /bin/sh
    args:
    - -c
    - cat
    resources:
      limits:
        memory: 256Mi
    workingDir: /home/jenkins
    volumeMounts:
    - mountPath: '/checkout'
      name: checkout
    - mountPath: '/var/run/docker.sock'
      name: docker-sock
  volumes:
  - name: checkout
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
'''
        }
    }

    environment {
        DOCKER_OPTS = "--config /checkout/.docker"
        PROMOTED_AT = "${payload.contents.promotedAt}"
        REGISTRY_URL = "https://${DTR_REGISTRY}"
        SOURCE_IMAGE = "${payload.contents.sourceRepository}"
        SOURCE_TAG = "${payload.contents.sourceTag}"
        TARGET_IMAGE = "${payload.contents.targetRepository}"
        TARGET_TAG = "${payload.contents.targetTag}"
    }

    stages {
        stage('Validate Webhook Contents') {
            steps {
                script {
                    println "The Promoted At time is: ${PROMOTED_AT}"
                    if ("${PROMOTED_AT}" == "0001-01-01T00:00:00Z") {
                        currentBuild.result = 'SUCCESS'
                        println "Setting skipRemainingStages to true as promotedAt value is 0001-01-01T00:00:00Z"
                        skipRemainingStages = true
                        return
                    }
                }
            }
        }
        stage('Setup Docker Config') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                container('alpine-utils') {
                    withCredentials([[$class: 'FileBinding', credentialsId: 'dct_repo_key', variable: 'REPOSITORY_SIGNING_KEY'],
                        [$class: 'FileBinding', credentialsId: 'dct_signing_key', variable: 'DCT_SIGNING_KEY'],
                        [$class: 'FileBinding', credentialsId: 'dct_signing_cert', variable: 'DCT_SIGNING_CERT'],
                        [$class: 'FileBinding', credentialsId: 'ca.crt', variable: 'DTR_CA_CRT']]) {
                        dir("/checkout/.docker/tls/${DTR_REGISTRY}") {
                            sh 'cp -p "$DTR_CA_CRT" ca.crt'
                            sh 'chmod 600 ca.crt'
                        }
                        dir('/checkout/.docker/trust/private') {
                            sh 'cp -p "$REPOSITORY_SIGNING_KEY" .'
                        }
                        dir('/checkout/.docker') {
                            sh 'cp -p "$DCT_SIGNING_KEY" key.pem'
                            sh 'cp -p "$DCT_SIGNING_CERT" cert.pub'
                        }
                    }
                }
            }
        }
        stage('Pull Image') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                container('alpine-utils') {
                    withCredentials([usernamePassword(credentialsId: 'jenkins', passwordVariable: 'REGISTRY_PASS', usernameVariable: 'REGISTRY_USER')]) {
                        sh """
                            docker version
                            docker ${DOCKER_OPTS} login -u ${REGISTRY_USER} -p ${REGISTRY_PASS} ${REGISTRY_URL}
                            docker ${DOCKER_OPTS} image pull ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}
                        """
                    }
                }
            }
        }

        stage('Sign Image') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                container('alpine-utils') {
                    withCredentials([[$class: 'StringBinding', credentialsId: 'dct_root_passphrase', variable: 'ROOT_SIGNING_PASSPHRASE'],
                        [$class: 'StringBinding', credentialsId: 'dct_repo_passphrase', variable: 'REPOSITORY_SIGNING_PASSPHRASE'],
                        [$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins', usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS']]) {

                        withEnv(["DOCKER_CONTENT_TRUST=1",
                            "DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$ROOT_SIGNING_PASSPHRASE",
                            "DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$REPOSITORY_SIGNING_PASSPHRASE"]) {
                            dir('/checkout/.docker') {
                                sh """
                                    docker ${DOCKER_OPTS} trust key load key.pem
                                    docker ${DOCKER_OPTS} image tag ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG} ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                                    docker ${DOCKER_OPTS} trust sign ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                                    docker ${DOCKER_OPTS} trust inspect --pretty ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                                """
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            container('alpine-utils') {
                sh """
                    docker image rm ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG} --force
                    docker image rm ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed --force
                """
            }
            script {
                def summaryString = """\
                Promotion Summary:
                    Source Image Name: ${SOURCE_IMAGE}:${SOURCE_TAG}
                    Target Image Name: ${TARGET_IMAGE}:${TARGET_TAG}
                    Location: ${payload.location}""".stripIndent()
                currentBuild.displayName = "#${env.BUILD_NUMBER} - Triggered by PROMOTION webhook for ${SOURCE_IMAGE}:${SOURCE_TAG}"
                currentBuild.description = summaryString
            }
        }
    }
}
